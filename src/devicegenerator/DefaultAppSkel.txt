/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package representation;

import devicerestmodel.app.App;
import devicerestmodel.representations.DevicePropertyNode;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import mdutil.MdUtil;
import org.jdom2.Document;
import org.jdom2.Element;
import org.jdom2.JDOMException;
import org.jdom2.input.SAXBuilder;


public class DefaultApp extends App implements PropertyChangeListener {

    private final Element configuration;
    private DevicePropertyNode rootNode;

    public DefaultApp(Element config) {
        try {
            System.out.println("Config " + MdUtil.element2XmlString(config));
        } catch (IOException ex) {
            Logger.getLogger(DefaultApp.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.configuration = config;
        this.rootNode = new
        //REPLACE WITH ROOT NODE
(this);
        doInit();
    }

    public static void main(String[] args) throws IOException {
        if (args.length == 0) {
            System.out.println("Must specify configuration file.");
            System.exit(1);
        }

        File xmlConfigurationFile = new File(args[0]);
        if (!xmlConfigurationFile.exists()) {
            System.out.println("Configuration file not found.");
            System.exit(1);
        }

        SAXBuilder builder = new SAXBuilder();
        Document document = null;
        Element configurationElement = null;
        try {
            document = (Document) builder.build(xmlConfigurationFile);
            configurationElement = document.getRootElement();
        } catch (JDOMException ex) {
            System.out.println("Can't read configuration file.");
            System.exit(1);
        }

        if (configurationElement == null || !configurationElement.getName().equals("device")) {
            System.out.println("Not a proper configuration XML file.");
            System.exit(-1);
        }

        new DefaultApp(configurationElement);
    }

    @Override
    public Element getConfiguration() {
        return configuration;
    }

    @Override
    public DevicePropertyNode getRootNode() {
        return rootNode;
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        
    }

}
